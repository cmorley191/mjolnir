namespace Discord.Structures

open System
open Newtonsoft.Json
open Newtonsoft.Json.Linq
open Newtonsoft.Json.FSharp
open Mjolnir.Core

type Message =
    {
        /// <summary>id of the message</summary>
        [<JsonProperty("id")>]
        Id: Snowflake

        /// <summary>id of the channel the message was sent in</summary>
        [<JsonProperty("channel_id")>]
        ChannelId: Snowflake

        /// <summary>the author of this message (not guaranteed to be a valid user, see below)</summary>
        [<JsonProperty("author")>]
        Author: User

        /// <summary>contents of the message</summary>
        [<JsonProperty("content")>]
        Content: string

        /// <summary>when this message was sent</summary>
        [<JsonProperty("timestamp")>]
        Timestamp: DateTime

        /// <summary>when this message was edited (or null if never)</summary>
        [<JsonProperty("edited_timestamp")>]
        EditedTimestamp: DateTime option

        /// <summary>whether this was a TTS message</summary>
        [<JsonProperty("tts")>]
        Tts: bool

        /// <summary>whether this message mentions everyone</summary>
        [<JsonProperty("mention_everyone")>]
        MentionEveryone: bool

        /// <summary>users specifically mentioned in the message</summary>
        [<JsonProperty("mentions")>]
        Mentions: User array

        /// <summary>roles specifically mentioned in this message</summary>
        [<JsonProperty("mention_roles")>]
        MentionRoles: Snowflake array
        (*
        /// <summary>any attached files</summary>
        [<JsonProperty("attachments")>]
        Attachments: Attachment array

        /// <summary>any embedded content</summary>
        [<JsonProperty("embeds")>]
        Embeds: Embed array

        /// <summary>reactions to the message</summary>
        [<JsonProperty("reactions")>]
        Reactions: Reaction array option
        *)
        /// <summary>used for validating a message was sent</summary>
        [<JsonProperty("nonce")>]
        Nonce: Snowflake option option

        /// <summary>whether this message is pinned</summary>
        [<JsonProperty("pinned")>]
        Pinned: bool

        /// <summary>if the message is generated by a webhook, this is the webhook's id</summary>
        [<JsonProperty("webhook_id")>]
        WebhookId: Snowflake option

        /// <summary>type of message</summary>
        [<JsonProperty("type")>]
        Type: int
        (*
        /// <summary>sent with Rich Presence-related chat embeds</summary>
        [<JsonProperty("activity")>]
        Activity: MessageActivity option

        /// <summary>sent with Rich Presence-related chat embeds</summary>
        [<JsonProperty("application")>]
        Application: MessageApplication option
        *)
    }

    static member Deserialize str = JsonConvert.DeserializeObject<Message>(str, General.serializationOpts)
    member this.Serialize () = JsonConvert.SerializeObject(this, General.serializationOpts)